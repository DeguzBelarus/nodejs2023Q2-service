openapi: 3.0.0
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0

servers:
  - url: /

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: 'TestUser'
        password:
          type: string
          example: '12345'
        version:
          type: number
          example: 1
          minimum: 1
        createAt:
          type: number
          example: 1655000000
        updateAt:
          type: number
          example: 1655000000
      required:
        - login
        - password
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Freddie Mercury'
        grammy:
          type: boolean
          example: false
      required:
        - name
        - grammy
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Innuendo'
        year:
          type: integer
          minimum: 1
          example: 1991
        artistId:
          type: string
          format: uuid
          nullable: true
      required:
        - name
        - year
        - artistId
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          minimum: 1
          description: In seconds
          example: 262
      required:
        - name
        - duration
        - artistId
        - albumId
    Favorites:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'

paths:
  /user:
    get:
      tags:
        - Users
      summary: Get all users
      description: Gets all users
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - Users
      summary: Create user
      description: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: The user's login
                password:
                  type: string
                  description: The user's password
              required:
                - login
                - password
      responses:
        201:
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request (body does not contain required fields or login is already in use or login and password are not strings or empty)
  /user/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get single user by id
      description: Gets single user by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request (id (userId) is invalid (not uuid))
        404:
          description: User not found
    put:
      tags:
        - Users
      summary: Update a user's password
      description: Updates a user's password by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                oldPassword:
                  type: string
                  description: The user's old password
                newPassword:
                  type: string
                  description: The user's new password
              required:
                - oldPassword
                - newPassword
      responses:
        200:
          description: The user has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request (userId is invalid (not uuid) or oldPassword and newPassword are not strings or empty)
        403:
          description: Field oldPassword is not match user's current password
        404:
          description: User not found
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes user by ID.
      responses:
        204:
          description: The user has been deleted
        400:
          description: Bad request (userId is invalid (not uuid))
        404:
          description: User not found

  /track:
    get:
      tags:
        - Track
      summary: Get tracks list
      description: Gets all library tracks list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
    post:
      tags:
        - Track
      summary: Add new track
      description: Add new track information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                artistId:
                  type: string
                  format: uuid
                  nullable: true
                albumId:
                  type: string
                  format: uuid
                  nullable: true
                duration:
                  type: integer
                  description: In seconds
                  example: 262
                  minimum: 1
              required:
                - name
                - duration
                - albumId
                - artistId
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request (body does not contain required fields or the data type of the fields does not match the required or track name is empty string / duration is equal 0)

  /track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Track
      summary: Get single track by id
      description: Gets single track by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request (id (trackId) is invalid (not uuid))
        404:
          description: Track was not found.
    put:
      tags:
        - Track
      summary: Update track information
      description: Update library track information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  example: Bohemian Rhapsody
                artistId:
                  type: string
                  format: uuid
                  nullable: true
                duration:
                  type: integer
                  description: In seconds
                  example: 262
                  minimum: 1
                albumId:
                  type: string
                  format: uuid
                  nullable: true
      responses:
        200:
          description: The track has been updated.
          content:
            schema:
              $ref: '#/components/schemas/Track'
        400:
          description: Bad request (id (trackId) is invalid (not uuid) or body is empty or the data type of the fields does not match the required or track name is empty string / duration is equal 0)
        404:
          description: Track was not found.
    delete:
      tags:
        - Track
      summary: Delete track
      description: Deletes track from library
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request (id (trackId) is invalid (not uuid))
        404:
          description: Track was not found.

  /album:
    get:
      tags:
        - Album
      summary: Get albums list
      description: Gets all library albums list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
    post:
      tags:
        - Album
      summary: Adds new album
      description: Add new album information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                year:
                  type: integer
                  minimum: 1
                  example: 1991
                artistId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - year
                - artistId
      responses:
        201:
          description: Album is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request (body does not contain required fields or the data type of the fields does not match the required or album name is empty string / year is equal 0)

  /album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Album
      summary: Get single album by id
      description: Gets single album by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request(id (albumId) is invalid (not uuid))
        404:
          description: Album was not found.
    put:
      tags:
        - Album
      summary: Updates album information
      description: Update library album information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                year:
                  type: integer
                artistId:
                  type: string
                  format: uuid
                  nullable: true
      responses:
        200:
          description: The album has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request (id (albumId) is invalid (not uuid) or body is empty or the data type of the fields does not match the required or album name is empty string / duration is equal 0)
        404:
          description: Album was not found.
    delete:
      tags:
        - Album
      summary: Deletes album
      description: Delete album from library
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request (id (albumId) is invalid (not uuid))
        404:
          description: Album was not found.

  /artist:
    get:
      tags:
        - Artist
      summary: Gets all artists
      description: Get all artists
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
    post:
      tags:
        - Artist
      summary: Adds new artist
      description: Add new artist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Freddie Mercury'
                grammy:
                  type: boolean
                  example: true
              required:
                - name
                - grammy
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request (body does not contain required fields or the data type of the fields does not match the required or artist name is empty string)

  /artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Artist
      summary: Gets single artist by id
      description: Get single artist by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request (id (artistId) is invalid (not uuid))
        404:
          description: Artist was not found.
    put:
      tags:
        - Artist
      summary: Updates artist information
      description: Update artist information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Freddie Mercury'
                grammy:
                  type: boolean
                  example: true
      responses:
        200:
          description: The artist has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request (id (artistId) is invalid (not uuid) or body is empty or the data type of the fields does not match the required or artist name is empty string)
        404:
          description: Artist was not found.
    delete:
      tags:
        - Artist
      summary: Deletes artist
      description: Delete artist from library
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request (id (artistId) is invalid (not uuid))
        404:
          description: Artist was not found.

  /favs:
    get:
      tags:
        - Favorites
      summary: Get all favorites
      description: Gets all favorites artists, albums and tracks
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites'

  /favs/track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Adds track to the favorites
      description: Add track to the favorites
      responses:
        201:
          description: Added successfully
        400:
          description: Bad request (id (track) is invalid (not uuid))
          content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  message: 'Message content'
        422:
          description: Track with id doesn't exist.
          content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  message: 'Message content'
    delete:
      tags:
        - Favorites
      summary: Deletes track from favorites
      description: Delete track from favorites
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request (id (trackId) is invalid (not uuid))
          content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  message: 'Message content'
        404:
          description: Track was not found.
          content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  message: 'Message content'

  /favs/album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Adds album to the favorites
      description: Add album to the favorites
      responses:
        201:
          description: Added successfully
        400:
          description: Bad request (id (albumId) is invalid (not uuid))
          content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  message: 'Message content'
        422:
          description: Album with id doesn't exist.
          content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  message: 'Message content'
    delete:
      tags:
        - Favorites
      summary: Deletes album from favorites
      description: Delete album from favorites
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request (id (albumId) is invalid (not uuid))
          content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  message: 'Message content'
        404:
          description: Album was not found.
          content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  message: 'Message content'

  /favs/artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Adds artist to the favorites
      description: Add artist to the favorites
      responses:
        201:
          description: Added successfully
        400:
          description: Bad request (id (artistId) is invalid (not uuid))
          content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  message: 'Message content'
        422:
          description: Artist with id doesn't exist.
          content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  message: 'Message content'
    delete:
      tags:
        - Favorites
      summary: Deletes artist from favorites
      description: Delete artist from favorites
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request (id (artistId) is invalid (not uuid))
          content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  message: 'Message content'
        404:
          description: Artist was not found.
          content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  message: 'Message content'
